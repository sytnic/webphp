-- Adminer 4.3.1 MySQL dump

SET NAMES utf8;
SET time_zone = '+00:00';
SET foreign_key_checks = 0;
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

DROP TABLE IF EXISTS `pages`;
CREATE TABLE `pages` (
  `id` tinyint(4) unsigned NOT NULL AUTO_INCREMENT,
  `number` char(8) DEFAULT NULL,
  `title` char(50) NOT NULL,
  `content` longtext NOT NULL,
  `visible` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `pages` (`id`, `number`, `title`, `content`, `visible`) VALUES
(1,	'6.0',	'Test page',	'Тут должен быть длинный текст. Это тестовый контент для тестовой странички.',	0),
(2,	'6.0.1',	'Test page',	'Тут 6-0-1.',	0),
(3,	'1.2',	'Сертификат и IP',	'     \r\n      <div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача - яснее не придумаешь. Но сначала я ее не понял )). </p>\r\n		<h2>Задумка</h2>\r\n      <p>Итак, берём любой сайт и смотрим. Возьмём github.</p>\r\n        <h2>Решение</h2>\r\n      <p>Всё решение в скриншотах, естественно. Точнее, в тегах img.</p>\r\n	  <p>Смотрим на примере Firefox Developer Edition.</p>	\r\n        <img src=\"images/githubcert1.jpg\" alt=\"\"/>\r\n		<br><br>\r\n        <img src=\"images/githubcert2.jpg\" alt=\"\"/>\r\n		<br><br>\r\n		<img src=\"images/githubcert3.jpg\" alt=\"\"/>\r\n		<p>По кнопке \"Просмотреть сертификат\" Firefox выдаёт страничку с подробной информацией по сертификату и его пути.</p>\r\n		<img src=\"images/githubcert4.jpg\" alt=\"\"/>\r\n		<br><br>\r\n      <p>Ну а IP узнаём на сайте 2ip.ru.</p>\r\n        <img src=\"images/githubip.jpg\" width=\"776\" height=\"601\" alt=\"\"/>\r\n<p>То есть IP сайта github.com - 140.82.121.3</p>\r\n		\r\n		<h2>Размышления</h2>\r\n      <p>Ну, картинки в тегах img - не резиновые. Нужна, конечно, тонкая работа со стилями, чтобы иображения растягивались и сжимались. Примерно так, как работает самый верхний баннер с изображением кода.</p>\r\n	',	1),
(4,	'2.2',	'HTML c CSS',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Итак, теперь задача - добавить побольше html-элементов, включая что-то новое из HTML5. Вместе с CSS. </p>\r\n		<h2>Задумка</h2>\r\n      <p>Ну что ж. Добавим сюда табличку и видео.</p>\r\n        <h2>Решение</h2>\r\n      <p>Зачем говорить о решении, если на него лучше посмотреть?</p>\r\n		<table width=\"400\" border=\"1\">\r\n  <tbody>\r\n    <tr>\r\n      <th scope=\"col\">&nbsp;1 столбец</th>\r\n      <th scope=\"col\">&nbsp;2 столбец</th>\r\n      <th scope=\"col\">&nbsp;3 столбец</th>\r\n      <th scope=\"col\">&nbsp;4 столбец</th>\r\n    </tr>\r\n    <tr>\r\n      <td>&nbsp;2 строка</td>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n    </tr>\r\n    <tr>\r\n      <td>&nbsp;3 строка</td>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n      <td>&nbsp;</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n        <p>На самом деле, вот эта объемная граница между ячейками может настраиваться средствами стилей: до одиночной линиии (с помощью collapse) или даже вовсе быть убранной. Вообще, просто теги table без стилей создают таблицу именно без границ. </p>\r\n      <p>Ну а теперь видео.</p>\r\n        <p>Попробую вставить.</p>\r\n		<iframe width=\"420\" height=\"345\" src=\"https://www.youtube.com/embed/2MsN8gpT6jY\">\r\n</iframe>\r\n		<p>Это Ютуб видео. Здесь используются теги iframe. Если нужно вставить собственное сохранённое видео, то нужно применять немного другие теги: теги video.</p>\r\n		<p>Возможность напрямую встраивать видео на страницу появилась в HTML5.</p>',	1),
(5,	'3.1',	'JS',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Итак, задача - дополнить страничку элементами JavaScript.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Ну, с воображением у меня всегда были трудности. Поэтому попробую здесь что-нибудь воспроизвести.</p>\r\n        <h2>Решение</h2>\r\n		<button onclick=\"alert(\'Тут будут выполняться некоторые JavaScript элементы\');\">Что тут будет </button>\r\n      <p>Итак, маленький скрипт, перебирающий картинки. Остановить можно, кликнув по картинке.</p>\r\n		\r\n	  <p><img id=\"mainImage\" src=\"images/beach_houses.jpg\" alt=\"\" width=\"400\" height=\"260\" /></p>\r\n		\r\n	<p>Форма с обработкой событий onblur и onfocus:</p>\r\n	\r\n		<form class=\"highlight\"><br>\r\n		    <p style=\"padding-left: 10px;\"><label>Name:</label>\r\n			    <input type=\"text\" id=\"name\" value=\"your name\"> <br>\r\n			</p>\r\n			<p style=\"padding-left: 10px;\"><label>Email:</label>\r\n			    <input type=\"text\" id=\"email\"> \r\n			</p><br>\r\n		</form>\r\n\r\n        <h2>Размышления</h2>\r\n       <p>Кто-нибудь замечает, как правильно пишется Javascript? Да, судя по всему, правильно писать только JavaScript. А как он правильно произносится?..</p>\r\n\r\n<script src=\"js/script.js\"></script>\r\n',	1),
(6,	'3.2',	'JQuery',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача, особенно для такого бэкэндщика, как я, звучит угрожающе: создание, поиск элементов, обработка событий с помощью JQuery, добавление анимаций и обработка запросов с помощью JQuery.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Хорошо. Как минимум есть понимание, что делать. Вот и надо делать, по порядку.</p>\r\n        <h2>Решение</h2>\r\n      <p>Начну с простого. <strong>Поиск</strong> элементов. Тестовый параграф для примера. JQuery находит его по id и добавляет к нему выбранный дополнительный класс с жёлтым фоном.</p>\r\n		\r\n		<p id=\"test1\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in.</p>\r\n		<h2>Еще один заголовок второго уровня</h2>\r\n		<p>Да, и не кликайте по заголовкам второго уровня, а то они поменяются! Это пример <strong>создания</strong> немного другого элемента, совмещенное с <strong>обработкой события</strong> клика, при помощи JQuery.</p>\r\n		\r\n		<p>Создадим еще один тестовый параграф. Теперь, кликая по нему, JQuery обработает событие клика и \"попросит\" параграф медленно \"испариться\". Пример эдакой <strong>анимации</strong>.</p>\r\n		\r\n		<p id=\"test2\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in.</p>\r\n		\r\n		<p>Ну а по <strong>запросам</strong> я пока застрял. Причин несколько, но основная из них - у меня сегодня отключился интернет. Конечно, если покопаться  в интернете и посидеть над этим вопросом, его тоже можно решить. Я так понял, речь идёт о запросах, связанных одновременно с JQuery и AJAX.</p>\r\n			\r\n		<p>Да, и картинку можно тоже \"убрать\", кликнув по ней.</p>\r\n		\r\n	  <p><img id=\"mainImage\" src=\"images/beach_houses.jpg\" alt=\"\" width=\"400\" height=\"260\" /></p>\r\n		\r\n        <h2>Размышления</h2>\r\n       <p>JQuery, конечно, даёт много интересных возможностей. Их можно подробно изучить на сайте jquery.com.</p>\r\n\r\n<script src=\"js/jquery-3.3.1.min.js\"></script>\r\n<script src=\"js/scriptforjquery.js\"></script>\r\n	',	1),
(7,	'4.1',	'Git',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача - завести репозиторий и заскриншотить несколько простых шагов.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Мои планы в этом файле немного поменялись: выполню всё на тестовом репозитории.</p>\r\n        <h2>Решение</h2>\r\n      <p>Итак, решение - по порядку, по заданию, в скриншотах.</p>\r\n	  \r\n		<p>Создание репозитория на Github.</p>\r\n		<img src=\"images/git/1.jpg\" width=\"596\" height=\"372\" alt=\"\"/>\r\n		<p>Клонирование репозитория к себе на компьютер.</p>\r\n        <img src=\"images/git/2.jpg\" width=\"676\" height=\"600\" alt=\"\"/>		\r\n		<p>Сразу поясню, что я работаю на самом низком уровне: в терминале Git Bash. Ведь, как известно, различные программы, IDE, редакторы, Github Desktop создают красивую и удобную оболочку для того, что на самом деле происходит под капотом. А под капотом происходит Git Bash )).</p>\r\n		\r\n		<p>Синхронизация рабочей папки с онлайн-репозиторием.</p>\r\n		<img src=\"images/git/3.jpg\" width=\"593\" height=\"375\" alt=\"\"/>	\r\n		<p>Изменить файл в локальном репозитории, закоммитить и отправить в онлайн.</p>\r\n		<img src=\"images/git/4.jpg\" width=\"626\" height=\"553\" alt=\"\"/>\r\n		<hr>\r\n		<img src=\"images/git/5.jpg\" width=\"749\" height=\"277\" alt=\"\"/>\r\n		<p>Удалить файл из репозитория, закоммитить и запушить в онлайн.</p>\r\n		<img src=\"images/git/6.jpg\" width=\"640\" height=\"545\" alt=\"\"/>\r\n		<hr>\r\n		<img src=\"images/git/7.jpg\" width=\"732\" height=\"256\" alt=\"\"/>\r\n				\r\n		<p>Ну, вроде бы и всё.</p>		\r\n		\r\n        <h2>Размышления</h2>\r\n       <p>Если честно, я привык сначала создавать репозитории на компьютере. Прямо с помощью Git Bash. А уже потом push. Но в этом есть и недостаток. Если не создать сразу README.md на компьютере и просто добавить его потом в онлайн-репозитории, то что произойдёт при следующем коммит и пуше? Да, именно. Git Bash попросит сначала углубить знания в pull и fetch. А если ты параллельно создал и README.md у себя на компьютере? А если ты особо и не знаешь, что такое pull?</p>\r\n',	1),
(8,	'5.1',	'Терминал Linux',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача звучит - изучить \"основные и промежуточные команды\" Linux. По 5 штук.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Но вот незадача - я не смог понять, что подразумевается под \"основными\" и \"промежуточными\"!</p>\r\n		<p>Попробую релизовать это как работу с основными командами, которые требуются для навигации по системе Linux, и как работу с дополнительными командами, которые дополняют основную навигацию, а также помогают вебмастерам и администраторам VPS. Надеюсь, это тоже правильно.</p>\r\n        <h2>Решение</h2>\r\n      <p>Ну что ж. Действую по задумке.</p>\r\n		<h3>Основные команды</h3>\r\n		<p>pwd				текущая папка (print working directory).</p>\r\n		<img src=\"images/linux/pwd.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>ls				список находящегося в текущей папке.</p>\r\n		<p>Тут всё отобразилось на русском языке. На самом деле, это из-за настроек дружелюбной к пользователю десктопной версии Ubuntu. Обычно, конечно, всё отображается на английском.</p>\r\n		<img src=\"images/linux/ls.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>Наверное всё-таки перейдём в другую папку.</p>\r\n		<p>cd				change directory («изменить директорию»).</p>\r\n		<p>cd ..				переход на папку вверх</p>\r\n		<img src=\"images/linux/cd.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>ls -la				подробный список находящегося в папке (с правами доступа).</p>\r\n		<img src=\"images/linux/lsla.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>ls -a				список всего находящегося в папке, включая скрытое (-a == all).</p>\r\n		<p>ls &ltdir&gt;			вывести содержимое подпапки.</p>\r\n		<img src=\"images/linux/lsdir.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>mkdir &ltdir&gt;			make directory («создать директорию»).</p>\r\n		<img src=\"images/linux/mkdir.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<h4>Горячие клавиши</h4>\r\n		<p>При переходе из Windows желательно сразу обзавестись горячими клавишами, а иначе будет трудно. Как минимум могут понадобиться:</p>\r\n		<p><ul>\r\n		    <li>стрелка вверх, стрелка вниз - предыдущая, следующая уже вводимая команда</li>\r\n			<li>shift+insert	-	вставка из буфера обмена</li>\r\n			<li>левая кнопка windows + пробел - поменять язык</li>\r\n		</ul>	\r\n	  </p>\r\n		<h3>Дополнительные команды</h3>\r\n		<p>ps aux - Информация о запущенных процессах.</p>\r\n		<img src=\"images/linux/psaux.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>ps aux | grep httpd - Информация о запущенных процессах сервера (связанных с процессом httpd). </p>\r\n		<p>При этом надо помнить, что веб-сервер работает под именем пользователя не равным root (суперпользователь) и lester (пользователь)</p>\r\n		<p>Но для начала надо запустить веб-сервер. Он, конечно, должен быть сначала установлен. Запуск у меня (XAMPP) осуществляется командой: </p>\r\n		<p>sudo /opt/lampp/lampp start</p>\r\n		<img src=\"images/linux/lamppstart.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>Как видно, процесс, отвечающий за веб-сервер, называется daemon. Правда, мы тут видим и ошибки, записываемые в лог: я давно не пользовался этой виртуальной машиной.</p>\r\n		<img src=\"images/linux/grephttpd.jpg\" width=\"780\" height=\"348\" alt=\"\"/>\r\n		<p>Небольшая отладка показывает проблемы в одном из процессов. Лог ругается, что не может строго определить IP адрес виртуальной машины. Вероятно, это потому, что я сижу без интернета: отключили (нет, баланс в порядке - сломался где-то).</p>\r\n		<img src=\"images/linux/quickdebug.jpg\" width=\"630\" height=\"380\" alt=\"\"/>\r\n		<p>Я уже уморился и уморил вас, но по правилам задания осталось еще хотя бы две команды.</p>\r\n		<p>Поэкспериментируем с файловыми правами, с выделенным файлом.</p>\r\n		<img src=\"images/linux/fileperm1.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		<p>Установка владельца файла:</p>\r\n		<p>sudo chown lester file_permissions.php</p>\r\n		\r\n		<p>Но тут уже уморился сам  Убунту. Посыпались ошибки. Есть подозрение, что эта виртуальная машина долго стояла на паузе, прямо-таки пару лет. Поэтому ошибки связаны с этим. Обещаю поиграть с отладкой и выяснить, в чём была проблема.</p>\r\n		<img src=\"images/linux/fileperm2.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n		\r\n		\r\n		\r\n        <h2>Размышления</h2>\r\n       <p>Пожалуй, путешествовать по Linux\'u - это поинтересней, чем сёрфить с Гуглом )) .</p>\r\n	  <img src=\"images/linux/lamppstop.jpg\" width=\"580\" height=\"348\" alt=\"\"/>\r\n     ',	1),
(9,	'5.2',	'PHP без БД',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>\r\n      \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача - создать PHP-приложение для разрабатываемого проекта.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Выбранное мной решение состоит в следующем.</p>\r\n		<p>Как я понимаю, в этом и последующем задании 6.2 нам нужно будет создать небольшое PHP-приложение c базой данных для вот этого текущего проекта/сайта.</p>\r\n		<p>В связи с этим, чтобы не удалять этот html-сайт и оставить его наработки легко доступными, я оставлю его как есть. А для php-проекта сделаю отдельный сайт - этакую копию данного сайта, но на php.</p>\r\n        \r\n    <h2>Решение</h2>\r\n    <p>Ну что ж, приложение создано. И оно уже работает.</p>\r\n   \r\n    <h2>Описание приложения</h2>\r\n    <p>Ничего сверхъестественного, но нужно следить за правильностью открываемых и закрываемых html-тегов. - Все повторяющиеся элементы макета страницы вынесены в отдельные файлы в includes/layout/ . На самих страничках (которые теперь все .php) они подключаются с помощью include. Теперь, чтобы что-то изменить в общих элементах страницы для всего сайта, достаточно поменять это в одном нужном файле php в includes/layout/ .</p>\r\n    <p>Удалось также решить проблему \"неоднообразности\" для страниц 3.1 и 3.2: добавил закрывающие теги body и html в конец каждого файла отдельно, а для 3.1 и 3.2 добавил ссылки на скрипты перед body.</p>\r\n\r\n    <h2>Что дальше?</h2>\r\n    <p>Okay. Дальше предстоит большая работа. И приложение вновь будет переписано. (Успею ли я?). Нужно подключить базу данных к приложению. Приложение должно работать на базе данных. Это значит, что должен быть создан один php-файл для всех страниц-статей и весь смысловой контент должен подгружаться из базы данных. Ну что ж, не теряем время...</p>\r\n\r\n    <h2>Версионность</h2>\r\n    <p>Это приложение без базы данных будет определено и закоммичено как версия 1 для проекта webphp. Версия 2 - это будет версия с базой данных.</p>\r\n\r\n    <hr>',	1),
(10,	'6.2',	'PHP + MySQL',	'<div id=\"bannerImage\"><img src=\"images/mycode1000x300.jpg\" alt=\"\"/></div>  \r\n		\r\n		<h2>Задача</h2>\r\n	  <p>Задача - создать тестовую базу данных MySQL для проекта по курсу. Протестировать 3-4 запроса.</p>\r\n		<h2>Задумка</h2>\r\n      <p>Задумка уже получила начало в пункте 5.2. Это, скорей всего, будет простая база данных с одной табличкой. Php-приложение с базой данных будут вынесены отдельно от этого html-сайта. 3-4 запроса, скорей всего, заскриншотю и размещу на этой страничке.</p>\r\n		\r\n        <h2>Пояснение решения</h2>\r\n      <p>Об этом достаточно сказано в пункте 5.2. Решение вызвано тем, что:</p>\r\n		<p>1) это будет минималистичный проект,</p>\r\n    <p>2) нехватка времени не позволяет создать большой и законченный проект.</p>\r\n    \r\n    <h2>Цель достигнута</h2>\r\n<p>Итак, долгая цель достигнута. Приложение работает на одном файле, собирая нужную информацию из базы данных.</p>\r\n<p>Конечно, нет времени на рефакторинг и развитие приложение. Но! Уфф! \"Hooraay!\"</p>\r\n\r\n<h2>А как же тестируемые запросы?</h2>\r\n<p>Вы спросите: \"А где же тестируемые запросы?\". - Но они и так тестируются моей базой данных при работе этого почти одностраничного приложения!</p> \r\n<p>А по канонам безопасности веб-приложений я не могу показать их здесь. ))</p>\r\n\r\n<p>И даже это нельзя показывать:</p>\r\n\r\n<img src=\"images/db/table.jpg\" width=\"700\" alt=\"\"/>\r\n\r\n<p>И, кстати, по-моему, строка </p>\r\n  <pre><code>&lt;?= \'Hello world\' ?&gt;</code></pre>\r\n<p>не имеет смысла. Ибо хоть теги и правильные, но что делает эта строка?\r\n</p>',	1);

-- 2020-11-18 14:34:23
